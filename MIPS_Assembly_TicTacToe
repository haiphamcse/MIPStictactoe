.data:
	square: .word 48, 49, 50, 51, 52, 53, 54, 55, 56, 57
	#if only 9 elements => char[0] = 1st square, char[1] = 2nd square, ...
	#add an element in the first so char[0] = '0', char[1] = 1st square, char[2] = 2nd square, ....
	char0: .asciiz "Player "
	char1: .asciiz ", enter a number:"
	char2: .asciiz "Invalid move, please input again\n"
	
	char_board_0: .asciiz "\n.........................................\n"
	char_board_1: .asciiz "\t Tic Tac Toe\n"
	char_board_2: .asciiz "   Player 1 (X)  -  Player 2 (O)\n"
	char_board_3: .asciiz "\t|     |     |     |\n"
	char_board_4: .asciiz "\t|  "
	char_board_5: .asciiz "  |  "
	char_board_6: .asciiz "  |\n"
	char_board_7: .asciiz "\t|_____|_____|_____|\n"
	
	char3: .asciiz "   ==>Player "
	char4: .asciiz " win"
	char5: .asciiz "   ==>Game draw"

.text:

	#3 ham: main, checkwin, board
	main:
	#int player = 1, i, choice
	#char mark
	#$s0 = player
	#$s1 = free
	#$s2 = choice
	#$s3 = mark
	#$s4 = i
	#s5 = square base address
	#$s7 = -1
	la $s5, square
	addi $s7, $zero, -1
	addi $s0, $zero, 1
	
	addi $s4, $zero, -1
	main_dowhile:
		jal board
		addi $s1, $zero, 2
		div $s0, $s1
		mfhi $s1
		#s1 = 0 => player%2 => player = 2
		bne $s1, $zero, assign_player_1
			addi $s0, $zero, 2
			j continue_loop
		assign_player_1:
			addi $s0, $zero, 1
		continue_loop:
			#print
			li $v0, 4
			la $a0, char0
			syscall
			add $a0, $s0, $zero
			li $v0, 1
			syscall
			li $v0, 4
			la $a0, char1
			syscall
			
			#take cin
			li $v0, 5
			syscall
			add $s2, $zero, $v0 #s2 = choice
			
			#mark = (player == 1)? 'X' : 'O'
			#mark = $s3
			addi $s3, $zero, 1
			beq $s0, $s3, assign_X
				addi $s3, $zero, 79
				j continue_loop_1
			assign_X:
				addi $s3, $zero, 88
			continue_loop_1:
				
			#nhi?u dòng if else
			addi $s1, $zero, 1
			bne $s2, $s1, second_loop
				#choice == 1
				#check square[1] == '1'
					#load square[1]
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[1]
					addi $s1, $zero, 49
					#$s1 = '1'
					bne $s7, $s1, second_loop
						sw $s3, 0($s6)
						j update_dowhile
			second_loop:
			addi $s1, $zero, 2
			bne $s2, $s1, third_loop
				#choice == 2
				#check square[2] == '2'
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[2]
					addi $s1, $zero, 50
					#$s1 = '2'
					bne $s7, $s1, third_loop
						sw $s3, 0($s6)
						j update_dowhile
						
			third_loop:
			addi $s1, $zero, 3
			bne $s2, $s1, four_loop
				#choice == 3
				#check square[3] == '3'
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[3]
					addi $s1, $zero, 51
					#$s1 = '3'
					bne $s7, $s1, four_loop
						sw $s3, 0($s6)
						j update_dowhile
			four_loop:
			addi $s1, $zero, 4
			bne $s2, $s1, five_loop
				#choice == 4
				#check square[4] == '4'
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[4]
					addi $s1, $zero, 52
					#$s1 = '4'
					bne $s7, $s1, five_loop
						sw $s3, 0($s6)
						j update_dowhile
			
			five_loop:
			addi $s1, $zero, 5
			bne $s2, $s1, six_loop
				#choice == 5
				#check square[5] == '5'
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[5]
					addi $s1, $zero, 53
					#$s1 = '5'
					bne $s7, $s1, six_loop
						sw $s3, 0($s6)
						j update_dowhile
			six_loop:
			addi $s1, $zero, 6
			bne $s2, $s1, seven_loop
				#choice == 6
				#check square[6] == '6'
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[6]
					addi $s1, $zero, 54
					#$s1 = '6'
					bne $s7, $s1, seven_loop
						sw $s3, 0($s6)
						j update_dowhile
			seven_loop:
			addi $s1, $zero, 7
			bne $s2, $s1, eight_loop
				#choice == 7
				#check square[7] == '7'
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[7]
					addi $s1, $zero, 55
					#$s1 = '7'
					bne $s7, $s1, eight_loop
						sw $s3, 0($s6)
						j update_dowhile
			
			eight_loop:
			#choice == 8 && square[8] == '8'
			addi $s1, $zero, 8
			bne $s2, $s1, nine_loop
				#choice == 8
				#check square[8] == '8'
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[8]
					addi $s1, $zero, 56
					#$s1 = '8'
					bne $s7, $s1, nine_loop
						sw $s3, 0($s6)
						j update_dowhile
			
			nine_loop:
			addi $s1, $zero, 9
			bne $s2, $s1, else_loop
				#choice == 9
				#check square[9] == '9'
					sll $s1, $s1, 2
					add $s6, $s5, $s1
					lw $s7, 0($s6)
					#$s6 = square[9]
					addi $s1, $zero, 57
					#$s1 = '9'
					bne $s7, $s1, else_loop
						sw $s3, 0($s6)
						j update_dowhile
			else_loop:
			#invalid
			li $v0, 4
			la $a0, char2
			syscall
			addi $s0, $s0, -1
			#jal getch
			
			
		update_dowhile:
		#i = checkwin()
		#s4 = i
		jal checkwin
		addi $s4, $v0, 0
		#player++
		addi $s0, $s0, 1		
		addi $s7, $zero, -1
		
		#if i != -1 => endgame
	beq $s4, $s7, main_dowhile
	
	jal board
	
	#check winner
	addi $s1, $zero, 1
	bne $s4, $s1, main_else
		addi $s0, $s0, -1
		li $v0, 4
		la $a0, char3
		syscall
		add $a0, $s0, $zero
		li $v0, 1
		syscall
		li $v0, 4
		la $a0, char4
		syscall
		j main_done
	#check draw
	main_else:
		li $v0, 4
		la $a0, char5 #draw message
		syscall
		j main_done
	
	
	
	
	checkwin:
	#chú ý chi nên xài t, ko xài s
	#dòng if else 
	#s5 = square base address
	addi $t0, $zero, 1
	addi $t1, $zero, 2
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t2, $t0, $s5 #t2 = square + t0*4
	add $t3, $t1, $s5 #t3 = square + t1*4
	lw $t4, 0($t2)
	lw $t5, 0($t3)
	bne $t4, $t5, checkwin_loop_2
		addi $t0, $zero, 3
		sll $t0, $t0, 2
		add $t2, $t0, $s5 
		lw $t4, 0($t2)
		bne $t4, $t5, checkwin_loop_2
			addi $v0, $zero, 1
			jr $ra
			
	checkwin_loop_2:
	addi $t0, $zero, 4
	addi $t1, $zero, 5
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t2, $t0, $s5 #t2 = square + t0*4
	add $t3, $t1, $s5 #t3 = square + t1*4
	lw $t4, 0($t2)
	lw $t5, 0($t3)
	bne $t4, $t5, checkwin_loop_3
		addi $t0, $zero, 6
		sll $t0, $t0, 2
		add $t2, $t0, $s5 
		lw $t4, 0($t2)
		bne $t4, $t5, checkwin_loop_3
			addi $v0, $zero, 1
			jr $ra
	
	checkwin_loop_3:
	addi $t0, $zero, 7
	addi $t1, $zero, 8
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t2, $t0, $s5 #t2 = square + t0*4
	add $t3, $t1, $s5 #t3 = square + t1*4
	lw $t4, 0($t2)
	lw $t5, 0($t3)
	bne $t4, $t5, checkwin_loop_4
		addi $t0, $zero, 9
		sll $t0, $t0, 2
		add $t2, $t0, $s5 
		lw $t4, 0($t2)
		bne $t4, $t5, checkwin_loop_4
			addi $v0, $zero, 1
			jr $ra
	
	checkwin_loop_4:
	addi $t0, $zero, 1
	addi $t1, $zero, 4
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t2, $t0, $s5 #t2 = square + t0*4
	add $t3, $t1, $s5 #t3 = square + t1*4
	lw $t4, 0($t2)
	lw $t5, 0($t3)
	bne $t4, $t5, checkwin_loop_5
		addi $t0, $zero, 7
		sll $t0, $t0, 2
		add $t2, $t0, $s5 
		lw $t4, 0($t2)
		bne $t4, $t5, checkwin_loop_5
			addi $v0, $zero, 1
			jr $ra
	
	checkwin_loop_5:
	addi $t0, $zero, 2
	addi $t1, $zero, 5
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t2, $t0, $s5 #t2 = square + t0*4
	add $t3, $t1, $s5 #t3 = square + t1*4
	lw $t4, 0($t2)
	lw $t5, 0($t3)
	bne $t4, $t5, checkwin_loop_6
		addi $t0, $zero, 8
		sll $t0, $t0, 2
		add $t2, $t0, $s5 
		lw $t4, 0($t2)
		bne $t4, $t5, checkwin_loop_6
			addi $v0, $zero, 1
			jr $ra
	
	checkwin_loop_6:
	addi $t0, $zero, 3
	addi $t1, $zero, 6
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t2, $t0, $s5 #t2 = square + t0*4
	add $t3, $t1, $s5 #t3 = square + t1*4
	lw $t4, 0($t2)
	lw $t5, 0($t3)
	bne $t4, $t5, checkwin_loop_7
		addi $t0, $zero, 9
		sll $t0, $t0, 2
		add $t2, $t0, $s5 
		lw $t4, 0($t2)
		bne $t4, $t5, checkwin_loop_7
			addi $v0, $zero, 1
			jr $ra
	
	checkwin_loop_7:
	addi $t0, $zero, 1
	addi $t1, $zero, 5
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t2, $t0, $s5 #t2 = square + t0*4
	add $t3, $t1, $s5 #t3 = square + t1*4
	lw $t4, 0($t2)
	lw $t5, 0($t3)
	bne $t4, $t5, checkwin_loop_8
		addi $t0, $zero, 9
		sll $t0, $t0, 2
		add $t2, $t0, $s5 
		lw $t4, 0($t2)
		bne $t4, $t5, checkwin_loop_8
			addi $v0, $zero, 1
			jr $ra
	
	checkwin_loop_8:
	addi $t0, $zero, 3
	addi $t1, $zero, 5
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t2, $t0, $s5 #t2 = square + t0*4
	add $t3, $t1, $s5 #t3 = square + t1*4
	lw $t4, 0($t2)
	lw $t5, 0($t3)
	bne $t4, $t5, checkwin_loop_9
		addi $t0, $zero, 7
		sll $t0, $t0, 2
		add $t2, $t0, $s5 
		lw $t4, 0($t2)
		bne $t4, $t5, checkwin_loop_9
			addi $v0, $zero, 1
			jr $ra
	
	checkwin_loop_9:
		#check square[1]!='1'
		addi $t0, $zero, 1
		sll $t0, $t0, 2
		add $t1, $s5, $t0
		lw $t2, 0($t1)
		addi $t3, $zero, 49
		beq $t2, $t3, checkwin_else
			#check square[2]!='2'
			addi $t0, $zero, 2
			sll $t0, $t0, 2
			add $t1, $s5, $t0
			lw $t2, 0($t1)
			addi $t3, $zero, 50
			beq $t2, $t3, checkwin_else
				#check square[3]!='3'
				addi $t0, $zero, 2
				sll $t0, $t0, 2
				add $t1, $s5, $t0
				lw $t2, 0($t1)
				addi $t3, $zero, 51
				beq $t2, $t3, checkwin_else
					#check square[4]!='4'
					addi $t0, $zero, 4
					sll $t0, $t0, 2
					add $t1, $s5, $t0
					lw $t2, 0($t1)
					addi $t3, $zero, 52
					beq $t2, $t3, checkwin_else
						#check square[5]!='5'
						addi $t0, $zero, 5
						sll $t0, $t0, 2
						add $t1, $s5, $t0
						lw $t2, 0($t1)
						addi $t3, $zero, 53
						beq $t2, $t3, checkwin_else
							#check square[6]!='6'
							addi $t0, $zero, 6
							sll $t0, $t0, 2
							add $t1, $s5, $t0
							lw $t2, 0($t1)
							addi $t3, $zero, 54
							beq $t2, $t3, checkwin_else
								#check square[7]!='7'
								addi $t0, $zero, 7
								sll $t0, $t0, 2
								add $t1, $s5, $t0
								lw $t2, 0($t1)
								addi $t3, $zero, 55
								beq $t2, $t3, checkwin_else
									#check square[8]!='8'
									addi $t0, $zero, 8
									sll $t0, $t0, 2
									add $t1, $s5, $t0
									lw $t2, 0($t1)
									addi $t3, $zero, 56
									beq $t2, $t3, checkwin_else
										#check square[9]!='9'
										addi $t0, $zero, 9
										sll $t0, $t0, 2
										add $t1, $s5, $t0
										lw $t2, 0($t1)
										addi $t3, $zero, 57
										beq $t2, $t3, checkwin_else
											addi $v0, $zero, 0
											jr $ra
	checkwin_else:
	addi $v0, $zero, -1
	jr $ra
	board:
		addi $sp, $sp, -8
		sw $a0, 0($sp)
		sw $v0, 4($sp)
		
		
		li $v0, 4
		la $a0, char_board_0
		syscall
		li $v0, 4
		la $a0, char_board_1
		syscall
		li $v0, 4
		la $a0, char_board_0
		syscall
		li $v0, 4
		la $a0, char_board_2
		syscall
		li $v0, 4
		la $a0, char_board_0
		syscall
		li $v0, 4
		la $a0, char_board_7
		syscall
		li $v0, 4
		la $a0, char_board_4
		syscall
		
		#load square[1]
		addi $t1, $zero, 1
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_5
		syscall
		
		#load square[2]
		addi $t1, $zero, 2
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_5
		syscall
		
		#load square[3]
		addi $t1, $zero, 3
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_6
		syscall
		
		li $v0, 4
		la $a0, char_board_7
		syscall
		#xong hàng 1 ;-;
		#hàng 2:
		li $v0, 4
		la $a0, char_board_4
		syscall
		
		#load square[4]
		addi $t1, $zero, 4
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_5
		syscall
		
		#load square[5]
		addi $t1, $zero, 5
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_5
		syscall
		
		#load square[6]
		addi $t1, $zero, 6
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_6
		syscall
		li $v0, 4
		la $a0, char_board_7
		syscall
		#h?t hàng 2
		#hàng 3:
		li $v0, 4
		la $a0, char_board_4
		syscall
		
		#load square[7]
		addi $t1, $zero, 7
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_5
		syscall
		
		#load square[8]
		addi $t1, $zero, 8
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_5
		syscall
		
		#load square[9]
		addi $t1, $zero, 9
		sll $t1, $t1, 2
		add $t2, $s5, $t1
		lw $t3, 0($t2)
		add $a0, $t3, $zero
		li $v0, 11
		syscall
		
		li $v0, 4
		la $a0, char_board_6
		syscall
		li $v0, 4
		la $a0, char_board_7
		syscall
		li $v0, 4
		la $a0, char_board_0
		syscall
		
		
		lw $a0, 0($sp)
		lw $v0, 4($sp)
		addi $sp, $sp, 8
		jr $ra


	main_done:
	li $v0, 10 #terminate execution
	syscall
